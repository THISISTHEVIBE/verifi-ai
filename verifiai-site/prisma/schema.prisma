// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orgMemberships OrgMembership[]
  uploadedDocuments Document[] @relation("DocumentUploader")
  auditLogs     AuditLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members      OrgMembership[]
  documents    Document[]
  subscriptions Subscription[]

  @@map("orgs")
}

model OrgMembership {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   OrgRole @default(MEMBER)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("org_memberships")
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

model Document {
  id         String   @id @default(cuid())
  orgId      String
  uploaderId String
  filename   String
  originalName String
  path       String
  size       Int
  mimeType   String
  status     DocumentStatus @default(UPLOADED)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  org        Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  uploader   User       @relation("DocumentUploader", fields: [uploaderId], references: [id])
  analyses   Analysis[]
  auditLogs  AuditLog[]

  @@map("documents")
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  ANALYZED
  ERROR
}

model Analysis {
  id         String   @id @default(cuid())
  documentId String
  status     AnalysisStatus @default(PENDING)
  riskScore  Float?
  summary    String?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  completedAt DateTime?

  // Relations
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  findings   Finding[]
  reminders  Reminder[]

  @@map("analyses")
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

model Finding {
  id         String   @id @default(cuid())
  analysisId String
  type       FindingType
  severity   FindingSeverity
  title      String
  description String
  location   String?
  suggestion String?
  metadata   Json?
  createdAt  DateTime @default(now())

  // Relations
  analysis   Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("findings")
}

enum FindingType {
  RISK
  COMPLIANCE
  LEGAL
  FINANCIAL
  OPERATIONAL
}

enum FindingSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Reminder {
  id         String   @id @default(cuid())
  analysisId String
  title      String
  description String
  dueDate    DateTime?
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  analysis   Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  documentId String?
  action     String
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user       User?     @relation(fields: [userId], references: [id])
  document   Document? @relation(fields: [documentId], references: [id])

  @@map("audit_logs")
}

model Subscription {
  id         String   @id @default(cuid())
  orgId      String
  stripeCustomerId String? @unique
  stripeSubscriptionId String? @unique
  stripePriceId String?
  status     SubscriptionStatus @default(INACTIVE)
  plan       SubscriptionPlan @default(FREE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  org        Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

enum SubscriptionPlan {
  FREE
  PAY_PER_CONTRACT
  PROFESSIONAL
  ENTERPRISE
}
