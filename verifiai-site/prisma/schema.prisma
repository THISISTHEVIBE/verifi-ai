// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orgMembers    OrgMember[]
  documents     Document[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members       OrgMember[]
  documents     Document[]
  subscriptions Subscription[]

  @@map("orgs")
}

model OrgMember {
  id     String   @id @default(cuid())
  userId String
  orgId  String
  role   UserRole @default(MEMBER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("org_members")
}

model Document {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  status       DocumentStatus @default(UPLOADED)
  uploaderId   String
  orgId        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  uploader  User       @relation(fields: [uploaderId], references: [id])
  org       Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  analyses  Analysis[]
  auditLogs AuditLog[]

  @@map("documents")
}

model Analysis {
  id           String          @id @default(cuid())
  documentId   String
  status       AnalysisStatus  @default(PENDING)
  riskScore    Float?
  summary      String?
  aiProvider   String?
  aiModel      String?
  promptTokens Int?
  outputTokens Int?
  processingMs Int?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  document  Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  findings  Finding[]
  auditLogs AuditLog[]

  @@map("analyses")
}

model Finding {
  id          String      @id @default(cuid())
  analysisId  String
  type        FindingType
  severity    Severity
  title       String
  description String
  suggestion  String?
  pageNumber  Int?
  startChar   Int?
  endChar     Int?
  confidence  Float?
  createdAt   DateTime    @default(now())

  // Relations
  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("findings")
}

model Reminder {
  id         String        @id @default(cuid())
  documentId String
  type       ReminderType
  title      String
  dueDate    DateTime
  status     ReminderStatus @default(ACTIVE)
  notifiedAt DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("reminders")
}

model AuditLog {
  id         String    @id @default(cuid())
  userId     String?
  documentId String?
  analysisId String?
  action     String
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())

  // Relations
  user     User?     @relation(fields: [userId], references: [id])
  document Document? @relation(fields: [documentId], references: [id])
  analysis Analysis? @relation(fields: [analysisId], references: [id])

  @@map("audit_logs")
}

model Subscription {
  id                String             @id @default(cuid())
  orgId             String
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  stripePriceId     String?
  status            SubscriptionStatus @default(INACTIVE)
  plan              SubscriptionPlan   @default(PAY_PER_CONTRACT)
  contractsUsed     Int                @default(0)
  contractsLimit    Int?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean           @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Enums
enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  ANALYZED
  ERROR
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum FindingType {
  LIABILITY
  TERMINATION
  PAYMENT_TERMS
  RENEWAL
  PENALTY
  CONFIDENTIALITY
  INTELLECTUAL_PROPERTY
  COMPLIANCE
  OTHER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReminderType {
  CONTRACT_EXPIRY
  RENEWAL_DEADLINE
  PAYMENT_DUE
  TERMINATION_NOTICE
  REVIEW_REQUIRED
}

enum ReminderStatus {
  ACTIVE
  COMPLETED
  DISMISSED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum SubscriptionPlan {
  PAY_PER_CONTRACT
  SMB_SUBSCRIPTION
}
